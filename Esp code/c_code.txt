

#include<WiFi.h>
const char* ssid     = "arjun";
const char* password = "12345678";
const char* host = "192.168.43.51"; //ip
#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif
BluetoothSerial SerialBT;

#define M1 26
#define M2 27
#define M3 25
#define M4 33

#define PIR 23
#define BUZZ 22
#define LED 5


#include <TinyGPS++.h>
#define RXD2 16
#define TXD2 17
TinyGPSPlus gps;

int state = 0;


String Lati;
String Longi;
int gas_value;
int ir_value;
int proximity;


int trigPin = 19;    // Trigger
int echoPin = 18;    // Echo
long duration, cm;

void setup()
{
  Serial.begin(9600);
  Serial.print("Connecting to ");
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);

    Serial.println("connecting plz wait");
    delay(3000);
  }

  Serial.println("WIFI CONNECTED");
  delay(2000);
  SerialBT.begin("ESP32test"); //Bluetooth device name
  Serial.println("The device started, now you can pair it with bluetooth!");


  pinMode(M1, OUTPUT);
  pinMode(M2, OUTPUT);
  pinMode(M3, OUTPUT);
  pinMode(M4, OUTPUT);

  pinMode(BUZZ, OUTPUT);
  pinMode(LED, OUTPUT);

  pinMode(PIR, INPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  digitalWrite(BUZZ, HIGH);
  delay(100);
  digitalWrite(BUZZ, LOW);
  delay(100);
  digitalWrite(BUZZ, HIGH);
  delay(100);
  digitalWrite(BUZZ, LOW);
  delay(100);
  digitalWrite(BUZZ, HIGH);
  delay(100);
  digitalWrite(BUZZ, LOW);
  delay(100);
  start_dataup();
}














void loop()
{
  if (SerialBT.available() > 0)
  {
    char data = SerialBT.read();
    Serial.println(data);
    control(data);
  }
  digitalWrite(M1, LOW);
  digitalWrite(M2, LOW);
  digitalWrite(M3, LOW);
  digitalWrite(M4, LOW);


  Gas();
  Fire();
  ultrasonic();
  Gps();





}


void control(char data)
{

  if (data == 'F')
  {
    digitalWrite(M1, LOW);
    digitalWrite(M2, HIGH);
    digitalWrite(M3, LOW);
    digitalWrite(M4, HIGH);
    delay(100);



  }

  if (data == 'B')
  {

    digitalWrite(M1, HIGH);
    digitalWrite(M2, LOW);
    digitalWrite(M3, HIGH);
    digitalWrite(M4, LOW);
    delay(100);

  }
  if (data == 'S')
  {
    digitalWrite(M1, LOW);
    digitalWrite(M2, LOW);
    digitalWrite(M3, LOW);
    digitalWrite(M4, LOW);

  }

  if (data == 'R')
  {
    digitalWrite(M1, LOW);
    digitalWrite(M2, HIGH);
    digitalWrite(M3, HIGH);
    digitalWrite(M4, LOW);
    delay(100);
  }
  if (data == 'L')
  {
    digitalWrite(M1, HIGH);
    digitalWrite(M2, LOW);
    digitalWrite(M3, LOW);
    digitalWrite(M4, HIGH);
    delay(100);
  }

  if (data == 'P')
  {
    state = 1;
    while (state == 1)
    {
      Pir();
    }
  }


}

void Pir()
{
  char rx;
  int value = digitalRead(PIR);
  Serial.println(value);

  proximity = value;

  if (value == 1)
  {
    digitalWrite(BUZZ, HIGH);
    digitalWrite(LED, HIGH);
    delay(1000);
    dataup();

  }
  else
  {
    digitalWrite(BUZZ, LOW);
    digitalWrite(LED, LOW);

  }
  if (SerialBT.available())
  {
    rx = SerialBT.read();
    Serial.println(rx);

  }

  if (rx == 'n')
  {
    state = 0;
  }

}

void Gas()
{
  int value = analogRead(39);
  int gas_value_map = map(value, 0, 4095, 0, 100);
  //Serial.print("Gas=");
  //Serial.println(gas_value_map);

  gas_value = gas_value_map;
  if (gas_value_map == 100)
  {
    digitalWrite(BUZZ, HIGH);
    digitalWrite(LED, HIGH);
    dataup();
  }
  else
  {
    digitalWrite(BUZZ, LOW);
    digitalWrite(LED, LOW);
  }
}

void Fire()
{
  int value = analogRead(36);
  int Fire_value_map = map(value, 0, 4095, 0, 100);
  //Serial.print("Fire=");
  //Serial.println(value);

  ir_value = Fire_value_map;
  if (Fire_value_map < 10)
  {
    digitalWrite(BUZZ, HIGH);
    digitalWrite(LED, HIGH);
    dataup();
  }
  else
  {
    digitalWrite(BUZZ, LOW);
    digitalWrite(LED, LOW);
  }

}

void ultrasonic()
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  pinMode(echoPin, INPUT);
  duration = pulseIn(echoPin, HIGH);
  cm = (duration / 2) / 29.1;
  //Serial.print(cm);
  //Serial.print("cm");
  // Serial.println();
  delay(10);
  if (cm < 20)
  {

    digitalWrite(BUZZ, HIGH);
    digitalWrite(LED, HIGH);
   
    delay(10);

  }
  else
  {
    digitalWrite(BUZZ, LOW);
    digitalWrite(LED, LOW);
  }

}

void Gps()
{
  while ( Serial2.available() > 0) {
    gps.encode(Serial2.read());
    if (gps.location.isUpdated()) {

      Lati = String(gps.location.lat(), 6);
      Longi = String(gps.location.lng(), 6);
      Serial.print("LAT =");
      Serial.println(Lati);
      Serial.print(Longi);
    }
  }
}


void dataup()
{
  String line;
  Serial.print("connecting to ");
  Serial.println(host);
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;
  }
  Serial.println("connected");
  String url2 = "/human_detection_bot/getdata.php?";

  url2 += "&lat=" ;
  url2 += Lati ;
  url2 += "&lng=" ;     // temp sending
  url2 += Longi;
  url2 += "&lpg=" ;
  url2 += gas_value;
  url2 += "&fire=" ;
  url2 += ir_value;
  url2 += "&pir=" ;
  url2 +=  proximity;

  Serial.print("Requesting URL: ");
  Serial.println(url2);

  // This will send the request to the server
  client.print(String("GET ") + url2 + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: Keep-Alive\r\n\r\n");
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }
}

void start_dataup()
{
  String line;
  Serial.print("connecting to ");
  Serial.println(host);
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;
  }
  Serial.println("connected");
  String url2 = "/human_detection_bot/getdata.php?";

  url2 += "&lat=" ;
  url2 += 0;
  url2 += "&lng=" ;     // temp sending
  url2 += 0;
  url2 += "&lpg=" ;
  url2 += 0;
  url2 += "&fire=" ;
  url2 += 0;
  url2 += "&pir=" ;
  url2 += 0;

  Serial.print("Requesting URL: ");
  Serial.println(url2);

  // This will send the request to the server
  client.print(String("GET ") + url2 + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: Keep-Alive\r\n\r\n");
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }
}